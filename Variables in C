A variable is a name of the memory location. It is used to store data, Its values can be changed and it can be reused many times. It is also a way to represent memory location though symbol so that it can be easily identified.
The syntax to declare a variable is - type variable_list;
Examples of declaring the variables are; int a; char c; float b; double d; The a,b,c and d are variables, while float,int,char and double are the data types.
We can also declare 2 variables; E.g;int a=10,b=20; float f=20.8;  char c='A'; 
Rules for defining Variables; A variable can have alphabets, digits, and underscore. E.g; int a; int a30; int _ab;
A variable name can start with the alphabet, and underscore only. It can't start with a digit.
No whitespace is allowed within the variable name. E.g; int a b;
A variable name must not be any reserved word or keyword, e.g. int, float, int long etc.
Types of Variables in C;
Local Variable: A variable that is declared inside the function or block is called a local variable. It must be declared at the start of the block and you must have to initialize the local variable before it is used.
 E.g; void function1(){  
int x=10;//local variable  
}  
Global Variable: A variable that is declared outside the function or block is called a global variable. Any function can change the value of the global variable. It is available to all the functions. It must be declared at the start of the block. 
E.g; int value=20;//global variable  
void function1(){  
int x=10;//local variable  
}  
Static Variable: This is a variable that is declared with the static keyword. It retains its value between multiple function calls.
E.g; void function1(){  
int x=10;//local variable  
static int y=10;//static variable  
x=x+1;  
y=y+1;  
printf("%d,%d",x,y);  
} 
In the above example, the local variable only prints 11 each time the function is called but the static variable will print an incremented value in each function call which are 11,12,13 and so on.
Automatic Variable: All variables in C that are declared inside the block are automatic variables by default. We can declare an automatic variable using auto keyword.
E.g; void main(){  
int x=10;//local variable (also automatic)  
auto int y=20;//automatic variable  
}
External Variable: We share variable in multiple C source files by using external variable. We use the extern keyword to declare an external variable.
E.g; extern int x=10;//external variable (also global).
Data Types in C: A data type specifies the type of data that a variable can store such as integer,character,floating. etc.
Basic data types includes; int,char,float,double etc.
Derived data types includes; array,pointer,structure,union.
Enumeration data types include; enum.
Void data types include; void.
Basic data types, their Sizes and Format specifiers
Type	Size (bytes)	Format Specifier
int	at least 2, usually 4	%d, %i
char	1	%c
float	4	%f
double	8	%lf
short int	2 usually	%hd
unsigned int	at least 2, usually 4	%u
long int	at least 4, usually 8	%ld, %li
long long int	at least 8	%lld, %lli
unsigned long int	at least 4	%lu
unsigned long long int	at least 8	%llu
signed char	1	%c
unsigned char	1	%c
long double	at least 10, usually 12 or 16	%Lf
Reserved Keywords in C: They are considered words that cannot be used as variable names, constant name, etc. They are;
auto, break, case, char, const,continue, default, do, double, else, enum, extern, float, for, goto, if, int, long, register, return, short, signed, sizeof, static, struct, switch, typedef, union, unsigned, void, volatile, while.
C Identifiers: We can say that an identifier is a collection of alphanumeric characters that begins either with an alphabetical character or an underscore, which are used to represent various programming elements such as variables, functions, arrays, structures, unions, labels, etc. There are 52 alphabetical characters (uppercase and lowercase), underscore character, and ten numerical digits (0-9) that represent the identifiers. There is a total of 63 alphanumerical characters that represent the identifiers. Same rule for defining a variable is applicable for C identifiers. C Identifiers are also case sensitive.
Rules for naming Identifiers:
A valid identifier can have letters (both uppercase and lowercase letters), digits and underscores.
The first letter of an identifier should be either a letter or an underscore.
You cannot use keywords like int, while etc. as identifiers.
There is no rule on how long an identifier can be. However, you may run into problems in some compilers if the identifier is longer than 31 characters.
You can choose any name as an identifier if you follow the above rule, however, give meaningful names to identifiers that make sense. 